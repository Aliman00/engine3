/*
 *	testsuite3/tests/TestNoOrbClass.cpp generated by engine3 IDL compiler 0.60
 */

#include "TestNoOrbClass.h"

/*
 *	TestNoOrbClass
 */

TestNoOrbClass::~TestNoOrbClass() {
}


TestNoOrbClass::TestNoOrbClass(int val) {
	// testsuite3/tests/TestNoOrbClass.idl():  		value = val;
	value = val;
}

int TestNoOrbClass::getValue() {
	// testsuite3/tests/TestNoOrbClass.idl():  		return value;
	return value;
}

void TestNoOrbClass::setValue(int val) {
	// testsuite3/tests/TestNoOrbClass.idl():  		value = val;
	value = val;
}

void TestNoOrbClass::nothing() {
}

const char LuaTestNoOrbClass::className[] = "LuaTestNoOrbClass";

Luna<LuaTestNoOrbClass>::RegType LuaTestNoOrbClass::Register[] = {
	{ "_setObject", &LuaTestNoOrbClass::_setObject },
	{ "_getObject", &LuaTestNoOrbClass::_getObject },
	{ "getValue", &LuaTestNoOrbClass::getValue },
	{ "setValue", &LuaTestNoOrbClass::setValue },
	{ "add", &LuaTestNoOrbClass::add },
	{ 0, 0 }
};

LuaTestNoOrbClass::LuaTestNoOrbClass(lua_State *L) {
	realObject = static_cast<TestNoOrbClass*>(lua_touserdata(L, 1));
}

LuaTestNoOrbClass::~LuaTestNoOrbClass() {
}

int LuaTestNoOrbClass::_setObject(lua_State* L) {
	realObject = static_cast<TestNoOrbClass*>(lua_touserdata(L, -1));

	return 0;
}

int LuaTestNoOrbClass::_getObject(lua_State* L) {
	lua_pushlightuserdata(L, realObject.get());

	return 1;
}

int LuaTestNoOrbClass::getValue(lua_State *L) {
	int parameterCount = lua_gettop(L) - 1;
	
	if (parameterCount == 0) {
		int result = realObject->getValue();

		lua_pushinteger(L, result);
		return 1;
	} else {
		throw LuaCallbackException(L, "invalid argument count " + String::valueOf(parameterCount) + " for lua method 'TestNoOrbClass:getValue()'");
	}
	return 0;
}

int LuaTestNoOrbClass::setValue(lua_State *L) {
	int parameterCount = lua_gettop(L) - 1;
	
	if (lua_isnumber(L, -1)) {
		if (parameterCount == 1) {
			int val = lua_tointeger(L, -1);

			realObject->setValue(val);

			return 0;
		} else {
			throw LuaCallbackException(L, "invalid argument count " + String::valueOf(parameterCount) + " for lua method 'TestNoOrbClass:setValue(integer)'");
		}
	} else {
		throw LuaCallbackException(L, "invalid argument at 0 for lua method 'TestNoOrbClass:setValue(integer)'");
	}
	return 0;
}

int LuaTestNoOrbClass::add(lua_State *L) {
	int parameterCount = lua_gettop(L) - 1;
	
	return 0;
}

