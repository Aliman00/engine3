/*
 *	testsuite3/tests/TestIDLClass.h generated by engine3 IDL compiler 0.60
 */

#ifndef TESTIDLCLASS_H_
#define TESTIDLCLASS_H_

#include "engine/core/Core.h"

#include "engine/core/ManagedReference.h"

#include "engine/core/ManagedWeakReference.h"

#ifndef likely
#ifdef __GNUC__
#define likely(x)       __builtin_expect(!!(x), 1)
#define unlikely(x)     __builtin_expect(!!(x), 0)
#else
#define likely(x)       (x)
#define unlikely(x)     (x)
#endif
#endif
#include "engine/lua/Luna.h"

#include "system/util/Vector.h"

#include "engine/util/u3d/Vector3.h"

#include "system/lang/System.h"

#include "engine/lua/LuaCallbackException.h"

#include "engine/core/ManagedObject.h"

#include "engine/core/ManagedService.h"

namespace testsuite3 {
namespace tests {

class TestIDLClass : public ManagedService {
public:
	TestIDLClass(int val);

	int getValue();

	float blaNative();

	void setValue(int val);

	void setValue(int val1, int val2);

	unsigned int setValue2(int val1, int val2);

	void setParent(TestIDLClass* val);

	void setStringBla(String& bla);

	ManagedWeakReference<TestIDLClass* > getBlaParent();

	void setPosition(Vector3& pos);

	void setBlaParent(TestIDLClass* val);

	void moveImplementation();

	virtual void testCallback();

	void testShit(const Vector<int>& val);

	Vector<int>* getTestVector();

	String getBlaString();

	long long getLongval();

	ManagedWeakReference<TestIDLClass* > getParent();

	void asyncTest();

	DistributedObjectServant* _getImplementation();
	DistributedObjectServant* _getImplementationForRead() const;

	void _setImplementation(DistributedObjectServant* servant);

protected:
	TestIDLClass(DummyConstructorParameter* param);

	virtual ~TestIDLClass();

	friend class TestIDLClassHelper;
};

} // namespace tests
} // namespace testsuite3

using namespace testsuite3::tests;

namespace testsuite3 {
namespace tests {

class TestIDLClassImplementation : public ManagedServiceImplementation {
	int value;

	Vector<int> testVector;

protected:
	ManagedWeakReference<TestIDLClass* > parent;

	ManagedWeakReference<TestIDLClass* > blaParent;

public:
	TestIDLClassImplementation(int val);

	TestIDLClassImplementation(DummyConstructorParameter* param);

	int getValue();

	float blaNative();

	void setValue(int val);

	void setValue(int val1, int val2);

	unsigned int setValue2(int val1, int val2);

	void setParent(TestIDLClass* val);

	void setStringBla(String& bla);

	ManagedWeakReference<TestIDLClass* > getBlaParent();

	void setPosition(Vector3& pos);

	void setBlaParent(TestIDLClass* val);

	void moveImplementation();

	virtual void testCallback();

	void testShit(const Vector<int>& val);

	Vector<int>* getTestVector();

	String getBlaString();

	long long getLongval();

	ManagedWeakReference<TestIDLClass* > getParent();

	void asyncTest();

	WeakReference<TestIDLClass*> _this;

	operator const TestIDLClass*();

	DistributedObjectStub* _getStub();
	virtual void readObject(ObjectInputStream* stream);
	virtual void writeObject(ObjectOutputStream* stream);
protected:
	virtual ~TestIDLClassImplementation();

	void finalize();

	void _initializeImplementation();

	void _setStub(DistributedObjectStub* stub);

	void lock(bool doLock = true);

	void lock(ManagedObject* obj);

	void rlock(bool doLock = true);

	void wlock(bool doLock = true);

	void wlock(ManagedObject* obj);

	void unlock(bool doLock = true);

	void runlock(bool doLock = true);

	void _serializationHelperMethod();
	bool readObjectMember(ObjectInputStream* stream, const uint32& nameHashCode);
	int writeObjectMembers(ObjectOutputStream* stream);

	friend class TestIDLClass;
};

class TestIDLClassAdapter : public ManagedServiceAdapter {
public:
	TestIDLClassAdapter(TestIDLClass* impl);

	void invokeMethod(sys::uint32 methid, DistributedMethod* method);

	int getValue();

	void setValue(int val);

	void setValue(int val1, int val2);

	unsigned int setValue2(int val1, int val2);

	void setParent(TestIDLClass* val);

	void setStringBla(String& bla);

	ManagedWeakReference<TestIDLClass* > getBlaParent();

	void setPosition(Vector3& pos);

	void setBlaParent(TestIDLClass* val);

	void moveImplementation();

	void testCallback();

	void testShit(const Vector<int>& val);

	String getBlaString();

	long long getLongval();

	ManagedWeakReference<TestIDLClass* > getParent();

	void asyncTest();

};

class TestIDLClassHelper : public DistributedObjectClassHelper, public Singleton<TestIDLClassHelper> {
	static TestIDLClassHelper* staticInitializer;

public:
	TestIDLClassHelper();

	void finalizeHelper();

	DistributedObject* instantiateObject();

	DistributedObjectServant* instantiateServant();

	DistributedObjectAdapter* createAdapter(DistributedObjectStub* obj);

	friend class Singleton<TestIDLClassHelper>;
};

class LuaTestIDLClass {
public:
	static const char className[];
	static Luna<LuaTestIDLClass>::RegType Register[];

	LuaTestIDLClass(lua_State *L);
	virtual ~LuaTestIDLClass();

	int _setObject(lua_State *L);
	int _getObject(lua_State *L);
	int getValue(lua_State *L);
	int blaNative(lua_State *L);
	int setValue(lua_State *L);
	int setValue2(lua_State *L);
	int setParent(lua_State *L);
	int setStringBla(lua_State *L);
	int getBlaParent(lua_State *L);
	int setPosition(lua_State *L);
	int setBlaParent(lua_State *L);
	int moveImplementation(lua_State *L);
	int testCallback(lua_State *L);
	int testShit(lua_State *L);
	int getTestVector(lua_State *L);
	int getBlaString(lua_State *L);
	int getLongval(lua_State *L);
	int getParent(lua_State *L);
	int asyncTest(lua_State *L);

	Reference<TestIDLClass*> realObject;
};

} // namespace tests
} // namespace testsuite3

using namespace testsuite3::tests;

#endif /*TESTIDLCLASS_H_*/
