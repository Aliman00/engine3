/*
 *	testsuite3/tests/TestNoOrbClass.h generated by engine3 IDL compiler 0.60
 */

#ifndef TESTNOORBCLASS_H_
#define TESTNOORBCLASS_H_

#include "engine/core/Core.h"

#include "engine/core/ManagedReference.h"

#include "engine/core/ManagedWeakReference.h"

#ifndef likely
#ifdef __GNUC__
#define likely(x)       __builtin_expect(!!(x), 1)
#define unlikely(x)     __builtin_expect(!!(x), 0)
#else
#define likely(x)       (x)
#define unlikely(x)     (x)
#endif
#endif
#include "engine/lua/Luna.h"

#include "system/util/Vector.h"

#include "engine/lua/LuaCallbackException.h"

namespace testsuite3 {
namespace tests {

class TestNoOrbClass : public Object {
public:
private:
	int value;

	Reference<Vector<int>* > test;

	Reference<TestNoOrbClass* > testObject;

public:
	TestNoOrbClass(int val);

	virtual int getValue();

	virtual void setValue(int val);

protected:
	void nothing();

public:
	void add(Vector<int>* testing);




	virtual ~TestNoOrbClass();

};

class LuaTestNoOrbClass {
public:
	static const char className[];
	static Luna<LuaTestNoOrbClass>::RegType Register[];

	LuaTestNoOrbClass(lua_State *L);
	virtual ~LuaTestNoOrbClass();

	int _setObject(lua_State *L);
	int _getObject(lua_State *L);
	int getValue(lua_State *L);
	int setValue(lua_State *L);
	int add(lua_State *L);

	Reference<TestNoOrbClass*> realObject;
};

} // namespace tests
} // namespace testsuite3

using namespace testsuite3::tests;

#endif /*TESTNOORBCLASS_H_*/
