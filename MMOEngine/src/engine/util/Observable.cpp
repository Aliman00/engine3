/*
 *	engine/util/Observable.cpp generated by engine3 IDL compiler 0.60
 */

#include "Observable.h"

#include "engine/log/Logger.h"

/*
 *	ObservableStub
 */

enum {RPC_NOTIFYOBSERVERS__INT_MANAGEDOBJECT_LONG_ = 6,RPC_REGISTEROBSERVER__INT_OBSERVER_,RPC_DROPOBSERVER__INT_OBSERVER_,RPC_GETOBSERVERCOUNT__INT_};

Observable::Observable(DummyConstructorParameter* param) : ManagedObject(param) {
}

Observable::~Observable() {
}



void Observable::notifyObservers(unsigned int eventType, ManagedObject* arg1, long long arg2) {
	ObservableImplementation* _implementation = (ObservableImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_NOTIFYOBSERVERS__INT_MANAGEDOBJECT_LONG_);
		method.addUnsignedIntParameter(eventType);
		method.addObjectParameter(arg1);
		method.addSignedLongParameter(arg2);

		method.executeWithVoidReturn();
	} else
		_implementation->notifyObservers(eventType, arg1, arg2);
}

void Observable::registerObserver(unsigned int eventType, Observer* observer) {
	ObservableImplementation* _implementation = (ObservableImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_REGISTEROBSERVER__INT_OBSERVER_);
		method.addUnsignedIntParameter(eventType);
		method.addObjectParameter(observer);

		method.executeWithVoidReturn();
	} else
		_implementation->registerObserver(eventType, observer);
}

void Observable::dropObserver(unsigned int eventType, Observer* observer) {
	ObservableImplementation* _implementation = (ObservableImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_DROPOBSERVER__INT_OBSERVER_);
		method.addUnsignedIntParameter(eventType);
		method.addObjectParameter(observer);

		method.executeWithVoidReturn();
	} else
		_implementation->dropObserver(eventType, observer);
}

int Observable::getObserverCount(unsigned int eventType) {
	ObservableImplementation* _implementation = (ObservableImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETOBSERVERCOUNT__INT_);
		method.addUnsignedIntParameter(eventType);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->getObserverCount(eventType);
}

DistributedObjectServant* Observable::_getImplementation() {

	_updated = true;
	return _impl;
}

void Observable::_setImplementation(DistributedObjectServant* servant) {
	_impl = servant;
}

/*
 *	ObservableImplementation
 */

ObservableImplementation::ObservableImplementation() : ManagedObjectImplementation() {
	_initializeImplementation();
}

ObservableImplementation::ObservableImplementation(DummyConstructorParameter* param) : ManagedObjectImplementation(param) {
	_initializeImplementation();
}


ObservableImplementation::~ObservableImplementation() {
}


void ObservableImplementation::finalize() {
}

void ObservableImplementation::_initializeImplementation() {
	_setClassHelper(ObservableHelper::instance());

	_this = NULL;

	_serializationHelperMethod();
}

void ObservableImplementation::_setStub(DistributedObjectStub* stub) {
	_this = (Observable*) stub;
	ManagedObjectImplementation::_setStub(stub);
}

DistributedObjectStub* ObservableImplementation::_getStub() {
	return _this;
}

ObservableImplementation::operator const Observable*() {
	return _this;
}

void ObservableImplementation::lock(bool doLock) {
	_this->lock(doLock);
}

void ObservableImplementation::lock(ManagedObject* obj) {
	_this->lock(obj);
}

void ObservableImplementation::rlock(bool doLock) {
	_this->rlock(doLock);
}

void ObservableImplementation::wlock(bool doLock) {
	_this->wlock(doLock);
}

void ObservableImplementation::wlock(ManagedObject* obj) {
	_this->wlock(obj);
}

void ObservableImplementation::unlock(bool doLock) {
	_this->unlock(doLock);
}

void ObservableImplementation::runlock(bool doLock) {
	_this->runlock(doLock);
}

void ObservableImplementation::_serializationHelperMethod() {
	ManagedObjectImplementation::_serializationHelperMethod();

	_setClassName("Observable");

}

void ObservableImplementation::readObject(ObjectInputStream* stream) {
	uint16 _varCount = stream->readShort();
	for (int i = 0; i < _varCount; ++i) {
		String _name;
		_name.parseFromBinaryStream(stream);

		uint16 _varSize = stream->readShort();

		int _currentOffset = stream->getOffset();

		if(ObservableImplementation::readObjectMember(stream, _name)) {
		}

		stream->setOffset(_currentOffset + _varSize);
	}

	initializeTransientMembers();
}

bool ObservableImplementation::readObjectMember(ObjectInputStream* stream, const String& _name) {
	if (ManagedObjectImplementation::readObjectMember(stream, _name))
		return true;

	if (_name == "observerEventMap") {
		TypeInfo<ObserverEventMap >::parseFromBinaryStream(&observerEventMap, stream);
		return true;
	}


	return false;
}

void ObservableImplementation::writeObject(ObjectOutputStream* stream) {
	int _currentOffset = stream->getOffset();
	stream->writeShort(0);
	int _varCount = ObservableImplementation::writeObjectMembers(stream);
	stream->writeShort(_currentOffset, _varCount);
}

int ObservableImplementation::writeObjectMembers(ObjectOutputStream* stream) {
	String _name;
	int _offset;
	uint16 _totalSize;
	_name = "observerEventMap";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<ObserverEventMap >::toBinaryStream(&observerEventMap, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);


	return 1 + ManagedObjectImplementation::writeObjectMembers(stream);
}

void ObservableImplementation::notifyObservers(unsigned int eventType, ManagedObject* arg1, long long arg2) {
	// engine/util/Observable.idl():  		observerEventMap.notifyObservers(eventType, this, arg1, arg2);
	(&observerEventMap)->notifyObservers(eventType, _this, arg1, arg2);
}

void ObservableImplementation::registerObserver(unsigned int eventType, Observer* observer) {
	// engine/util/Observable.idl():  		observerEventMap.registerObserver(eventType, observer);
	(&observerEventMap)->registerObserver(eventType, observer);
}

void ObservableImplementation::dropObserver(unsigned int eventType, Observer* observer) {
	// engine/util/Observable.idl():  		observerEventMap.dropObserver(eventType, observer);
	(&observerEventMap)->dropObserver(eventType, observer);
}

int ObservableImplementation::getObserverCount(unsigned int eventType) {
	// engine/util/Observable.idl():  		return observerEventMap.getObserverCount(eventType);
	return (&observerEventMap)->getObserverCount(eventType);
}

/*
 *	ObservableAdapter
 */

ObservableAdapter::ObservableAdapter(ObservableImplementation* obj) : ManagedObjectAdapter(obj) {
}

Packet* ObservableAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case RPC_NOTIFYOBSERVERS__INT_MANAGEDOBJECT_LONG_:
		notifyObservers(inv->getUnsignedIntParameter(), (ManagedObject*) inv->getObjectParameter(), inv->getSignedLongParameter());
		break;
	case RPC_REGISTEROBSERVER__INT_OBSERVER_:
		registerObserver(inv->getUnsignedIntParameter(), (Observer*) inv->getObjectParameter());
		break;
	case RPC_DROPOBSERVER__INT_OBSERVER_:
		dropObserver(inv->getUnsignedIntParameter(), (Observer*) inv->getObjectParameter());
		break;
	case RPC_GETOBSERVERCOUNT__INT_:
		resp->insertSignedInt(getObserverCount(inv->getUnsignedIntParameter()));
		break;
	default:
		return NULL;
	}

	return resp;
}

void ObservableAdapter::notifyObservers(unsigned int eventType, ManagedObject* arg1, long long arg2) {
	((ObservableImplementation*) impl)->notifyObservers(eventType, arg1, arg2);
}

void ObservableAdapter::registerObserver(unsigned int eventType, Observer* observer) {
	((ObservableImplementation*) impl)->registerObserver(eventType, observer);
}

void ObservableAdapter::dropObserver(unsigned int eventType, Observer* observer) {
	((ObservableImplementation*) impl)->dropObserver(eventType, observer);
}

int ObservableAdapter::getObserverCount(unsigned int eventType) {
	return ((ObservableImplementation*) impl)->getObserverCount(eventType);
}

/*
 *	ObservableHelper
 */

ObservableHelper* ObservableHelper::staticInitializer = ObservableHelper::instance();

ObservableHelper::ObservableHelper() {
	className = "Observable";

	Core::getObjectBroker()->registerClass(className, this);
}

void ObservableHelper::finalizeHelper() {
	ObservableHelper::finalize();
}

DistributedObject* ObservableHelper::instantiateObject() {
	return new Observable(DummyConstructorParameter::instance());
}

DistributedObjectServant* ObservableHelper::instantiateServant() {
	return new ObservableImplementation(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* ObservableHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new ObservableAdapter((ObservableImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

