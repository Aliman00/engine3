/*
Copyright (C) 2007 <SWGEmu>. All rights reserved.
Distribution of this file for usage outside of Core3 is prohibited.
*/

package engine.core;

include system.lang.Object;
include system.thread.ReadWriteLock;
include system.thread.Lockable;

include system.io.Serializable;
include system.io.ObjectInputStream;
include system.io.ObjectOutputStream;

include engine.orb.object.DistributedObjectServant;

import engine.core.ObjectUpdateToDatabaseTask;

class ManagedObject implements Serializable {
	protected int persistenceLevel;
	
	private transient unsigned int lastCRCSave;
	
	protected transient ObjectUpdateToDatabaseTask updateToDatabaseTask;
	
	public ManagedObject() {
		persistenceLevel = 0;
		
		lastCRCSave = 0;
		
		updateToDatabaseTask = null;
	}

	/*@nativeStub 
	public native void acquireWeak(WeakReference<ManagedObject> ref);

	@nativeStub 
	public native void releaseWeak(WeakReference<ManagedObject> ref);*/

	@nativeStub 
	public native void updateForWrite();

	@nativeStub 
	public native void lock(boolean doLock = true);
	
	@nativeStub 
	public native void lock(ManagedObject obj);

	@local
	@nativeStub 
	public native void lock(Lockable obj);

	@nativeStub 
	public native void rlock(boolean doLock = true);

	@nativeStub 
	public native void wlock(boolean doLock = true);

	@nativeStub 
	public native void wlock(ManagedObject obj);

	@nativeStub 
	public native void unlock(boolean doLock = true);

	@nativeStub 
	public native void runlock(boolean doLock = true);

	@nativeStub 
	public native void setLockName(final string name);
	
	@nativeStub
	public native boolean notifyDestroy();
	
	/*public abstract void writeObject(string data) {
		Serializable.writeObject(data);
	}*/
	
	@local
	@noImplementationDeclaration
	public native void writeObject(ObjectOutputStream stream);
	
	@local
	@noImplementationDeclaration
	public native void readObject(ObjectInputStream stream);

	
	/*public abstract void readObject(final string data) {
		Serializable.readObject(data);
		
		initializeTransientMembers();
	}*/
	
	
	public abstract native void initializeTransientMembers();
	
	public native void updateToDatabase();
	public abstract native void queueUpdateToDatabaseTask();
	
	public void clearUpdateToDatabaseTask() {
		updateToDatabaseTask = null;
	}
	
	public unsigned int getLastCRCSave() {
		return lastCRCSave;
	}
	
	public void setLastCRCSave(unsigned int crc) {
		lastCRCSave = crc;
	}
	
	@local
	public boolean isPersistent() {
		return persistenceLevel != 0;
	}
	
	@local
	public int getPersistenceLevel() {
		return persistenceLevel;
	}
	
	/**
	 * Sets the persistence level of the object
	 * level 0 makes the object transient
	 * level 1 makes the object persistent but its not auto updated
	 * level 2 makes the object auto update every 5 minutes
	 * level 3 makes the object update to database after each change (write unlock)
	 */
	@local
	public native void setPersistent(int level);
}
