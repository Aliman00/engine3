/*
 *	engine/core/util/ManagedVector.h generated by engine3 IDL compiler 0.55
 */

#ifndef MANAGEDVECTOR_H_
#define MANAGEDVECTOR_H_

#include "engine/orb/DistributedObjectBroker.h"

namespace engine {
namespace core {
namespace util {

class ManagedVector : public DistributedObjectStub {
public:
protected:
	ManagedVector(DummyConstructorParameter* param);

	virtual ~ManagedVector();

	friend class ManagedVectorHelper;
};

class ManagedVectorImplementation;

class ManagedVectorAdapter : public DistributedObjectAdapter {
public:
	ManagedVectorAdapter(ManagedVectorImplementation* impl);

	Packet* invokeMethod(sys::uint32 methid, DistributedMethod* method);

};

class ManagedVectorHelper : public DistributedObjectClassHelper, public Singleton<ManagedVectorHelper> {
	static ManagedVectorHelper* staticInitializer;

public:
	ManagedVectorHelper();

	void finalizeHelper();

	DistributedObject* instantiateObject();

	DistributedObjectAdapter* createAdapter(DistributedObjectStub* obj);

	friend class SingletonWrapper<ManagedVectorHelper>;
};

class ManagedVectorServant : public DistributedObjectServant {
public:
	ManagedVector* _this;

public:
	ManagedVectorServant();
	virtual ~ManagedVectorServant();

	void _setStub(DistributedObjectStub* stub);
	DistributedObjectStub* _getStub();

};

} // namespace util
} // namespace core
} // namespace engine

using namespace engine::core::util;

#endif /*MANAGEDVECTOR_H_*/
