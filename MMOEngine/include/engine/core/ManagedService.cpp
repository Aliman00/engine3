/*
 *	engine/core/ManagedService.cpp generated by engine3 IDL compiler 0.60
 */

#include "ManagedService.h"


// Imported class dependencies

#include "engine/core/ObjectUpdateToDatabaseTask.h"

#include "system/io/ObjectOutputStream.h"

#include "system/io/ObjectInputStream.h"

#include "engine/core/ManagedObject.h"

/*
 *	ManagedServiceStub
 */

enum {};

ManagedService::ManagedService(DummyConstructorParameter* param) : ManagedObject(param) {
}

ManagedService::~ManagedService() {
}


DistributedObjectServant* ManagedService::_getImplementation() {

	_updated = true;
	return dynamic_cast<DistributedObjectServant*>(getForUpdate());}

void ManagedService::_setImplementation(DistributedObjectServant* servant) {
	setObject(dynamic_cast<ManagedServiceImplementation*>(servant));
}

/*
 *	ManagedServiceImplementation
 */

ManagedServiceImplementation::ManagedServiceImplementation() : ManagedObjectImplementation() {
	_initializeImplementation();
}

ManagedServiceImplementation::ManagedServiceImplementation(DummyConstructorParameter* param) : ManagedObjectImplementation(param) {
	_initializeImplementation();
}


ManagedServiceImplementation::~ManagedServiceImplementation() {
}


void ManagedServiceImplementation::finalize() {
}

void ManagedServiceImplementation::_initializeImplementation() {
	_setClassHelper(ManagedServiceHelper::instance());

	_serializationHelperMethod();
	_serializationHelperMethod();
}

void ManagedServiceImplementation::_setStub(DistributedObjectStub* stub) {
	_this = (ManagedService*) stub;
	ManagedObjectImplementation::_setStub(stub);
}

DistributedObjectStub* ManagedServiceImplementation::_getStub() {
	return _this;
}

ManagedServiceImplementation::operator const ManagedService*() {
	return _this;
}

Object* ManagedServiceImplementation::clone() {
	return (Object*) new ManagedServiceImplementation(*this);
}


void ManagedServiceImplementation::lock(bool doLock) {
}

void ManagedServiceImplementation::lock(ManagedObject* obj) {
}

void ManagedServiceImplementation::rlock(bool doLock) {
}

void ManagedServiceImplementation::wlock(bool doLock) {
}

void ManagedServiceImplementation::wlock(ManagedObject* obj) {
}

void ManagedServiceImplementation::unlock(bool doLock) {
}

void ManagedServiceImplementation::runlock(bool doLock) {
}

void ManagedServiceImplementation::_serializationHelperMethod() {
	ManagedObjectImplementation::_serializationHelperMethod();

	_setClassName("ManagedService");

}

void ManagedServiceImplementation::readObject(ObjectInputStream* stream) {
	uint16 _varCount = stream->readShort();
	for (int i = 0; i < _varCount; ++i) {
		String _name;
		_name.parseFromBinaryStream(stream);

		uint16 _varSize = stream->readShort();

		int _currentOffset = stream->getOffset();

		if(ManagedServiceImplementation::readObjectMember(stream, _name)) {
		}

		stream->setOffset(_currentOffset + _varSize);
	}

	initializeTransientMembers();
}

bool ManagedServiceImplementation::readObjectMember(ObjectInputStream* stream, const String& _name) {
	if (ManagedObjectImplementation::readObjectMember(stream, _name))
		return true;


	return false;
}

void ManagedServiceImplementation::writeObject(ObjectOutputStream* stream) {
	int _currentOffset = stream->getOffset();
	stream->writeShort(0);
	int _varCount = ManagedServiceImplementation::writeObjectMembers(stream);
	stream->writeShort(_currentOffset, _varCount);
}

int ManagedServiceImplementation::writeObjectMembers(ObjectOutputStream* stream) {
	String _name;
	int _offset;
	uint16 _totalSize;

	return 0 + ManagedObjectImplementation::writeObjectMembers(stream);
}

/*
 *	ManagedServiceAdapter
 */

ManagedServiceAdapter::ManagedServiceAdapter(ManagedServiceImplementation* obj) : ManagedObjectAdapter(obj) {
}

Packet* ManagedServiceAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	default:
		return NULL;
	}

	return resp;
}

/*
 *	ManagedServiceHelper
 */

ManagedServiceHelper* ManagedServiceHelper::staticInitializer = ManagedServiceHelper::instance();

ManagedServiceHelper::ManagedServiceHelper() {
	className = "ManagedService";

	Core::getObjectBroker()->registerClass(className, this);
}

void ManagedServiceHelper::finalizeHelper() {
	ManagedServiceHelper::finalize();
}

DistributedObject* ManagedServiceHelper::instantiateObject() {
	return new ManagedService(DummyConstructorParameter::instance());
}

DistributedObjectServant* ManagedServiceHelper::instantiateServant() {
	return new ManagedServiceImplementation(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* ManagedServiceHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new ManagedServiceAdapter((ManagedServiceImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

